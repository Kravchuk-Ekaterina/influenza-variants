1. Inspect the data from your roommate

$ wget http://ftp.sra.ebi.ac.uk/vol1/fastq/SRR170/001/SRR1705851/SRR1705851.fastq.gz
$ gzip -d SRR1705851.fastq.gz

2. Align your roommate’s data to the reference sequence

I have got the data from https://www.ncbi.nlm.nih.gov/nuccore/KF848938.1?report=fasta

a) Indexing the reference file
$ bwa index reference.fasta

b) Aligning the data, create, sort and index bam file
$ bwa mem reference.fasta SRR1705851.fastq > alignment.sam

c) Creating, sorting and indexing bam file
$ samtools view -S -b alignment.sam > alignment.bam
$ samtools sort alignment.bam -o roommate.bam
$ samtools index roommate.bam

3. Look for common variants with VarScan

a) Greating mpileup

Finding maximum depth
$ samtools depth -d 0 roommate.bam | cut -f3 | sort -n | tail -1
The output: 44522

Creating mpileup
$ samtools mpileup -d 45000 -f reference.fasta roommate.bam > my.mpileup

b) Calling VarScan

Finding mutations present in most (95% +) of the viral DNA
$ java -jar /home/kate_the_snail/Загрузки/VarScan.v2.3.9.jar mpileup2snp my.mpileup --min-var-freq 0.95 --variants --output-vcf 1 > VarScan_results.vcf
The output:
5 variant positions (5 SNP, 0 indel)
0 were failed by the strand-filter
5 variant positions reported (5 SNP, 0 indel)

c) Finding positions of SNPs

$ cat VarScan_results.vcf|awk 'NR>24 {print $1, $2, $4, $5}'
The output:
KF848938.1 72 A G
KF848938.1 117 C T
KF848938.1 774 T C
KF848938.1 999 C T
KF848938.1 1260 A C

We've found 5 SNPs

Looking at SNPs in IGV browser:

ACA (T) → ACG (T) no change
GCC (A) → GCT (A) no change
TTT (F) → TTC (F) no change
GGC (G) → GGT (G) no change
CTA (L) → CTC (L) no change

All the SNPs  have no effect on protein sequence

4. Look for rare variants with VarScan

a) Setting minimum variant frequency to 0.1%:
$ java -jar /home/kate_the_snail/Загрузки/VarScan.v2.3.9.jar mpileup2snp my.mpileup --min-var-freq 0.001 --variants --output-vcf 1 > VarScan_results_rare.vcf
The output:
23 variant positions (21 SNP, 2 indel)
0 were failed by the strand-filter
21 variant positions reported (21 SNP, 0 indel)

We've found 21 SNPs.

Look at their frequency:
$ cat VarScan_results_rare.vcf | awk 'NR>24 {split($10,a,":"); print $1, $2, $4, $5, a[7]}'
The output:
KF848938.1 72 A G 99,96%
KF848938.1 117 C T 99,82%
KF848938.1 254 A G 0,17%
KF848938.1 276 A G 0,17%
KF848938.1 307 C T 0,94%
KF848938.1 340 T C 0,17%
KF848938.1 389 T C 0,22%
KF848938.1 691 A G 0,17%
KF848938.1 722 A G 0,2%
KF848938.1 744 A G 0,17%
KF848938.1 774 T C 99,96%
KF848938.1 802 A G 0,23%
KF848938.1 859 A G 0,18%
KF848938.1 915 T C 0,19%
KF848938.1 999 C T 99,86%
KF848938.1 1043 A G 0,18%
KF848938.1 1086 A G 0,21%
KF848938.1 1213 A G 0,22%
KF848938.1 1260 A C 99,94%
KF848938.1 1280 T C 0,18%
KF848938.1 1458 T C 0,84%

We have found some rare mutations. 
We should inspect and align the control samples to remove errors

5. Inspect and align the control sample sequencing data

a) Getting the data
$ wget http://ftp.sra.ebi.ac.uk/vol1/fastq/SRR170/008/SRR1705858/SRR1705858.fastq.gz
$ wget http://ftp.sra.ebi.ac.uk/vol1/fastq/SRR170/009/SRR1705859/SRR1705859.fastq.gz
$ wget http://ftp.sra.ebi.ac.uk/vol1/fastq/SRR170/000/SRR1705860/SRR1705860.fastq.gz

Unzipping
$ gzip -d SRR1705858.fastq.gz
$ gzip -d SRR1705859.fastq.gz
$ gzip -d SRR1705860.fastq.gz

b) Looking at reads

Calculating number of reads:
$ wc -l SRR1705858.fastq
$ wc -l SRR1705859.fastq
$ wc -l SRR1705860.fastq
The output:
1026344 SRR1705858.fastq
933308 SRR1705859.fastq
999856 SRR1705860.fastq

1026344 / 4 = 256586 reads for SRR1705858.fastq
933308 / 4 = 233327 reads for SRR1705859.fastq
999856 / 4 = 249964 reads for SRR1705860.fastq

Generating fastqc reports:

$ fastqc -o . SRR1705858.fastq SRR1705859.fastq SRR1705860.fastq
You can find html files in this repository
The number of reads is the same

c) Aligning control data, creating, sorting and indexing bam files

$ bwa mem reference.fasta SRR1705858.fastq > alignment_1.sam
$ bwa mem reference.fasta SRR1705859.fastq > alignment_2.sam
$ bwa mem reference.fasta SRR1705860.fastq > alignment_3.sam

$ samtools view -S -b alignment_1.sam > alignment_1.bam
$ samtools view -S -b alignment_2.sam > alignment_2.bam
$ samtools view -S -b alignment_3.sam > alignment_3.bam

$ samtools sort alignment_1.bam -o alignment_1_sorted.bam
$ samtools sort alignment_2.bam -o alignment_2_sorted.bam 
$ samtools sort alignment_3.bam -o alignment_3_sorted.bam

$ samtools index alignment_1_sorted.bam
$ samtools index alignment_2_sorted.bam 
$ samtools index alignment_3_sorted.bam 

Looking for maximum depth:

$ samtools depth -d 0 alignment_1_sorted.bam | cut -f3 | sort -n | tail -1
$ samtools depth -d 0 alignment_2_sorted.bam | cut -f3 | sort -n | tail -1
$ samtools depth -d 0 alignment_3_sorted.bam | cut -f3 | sort -n | tail -1
The output:
35782
32837
36262

Looking for average depth and coverage:

$ samtools coverage alignment_1_sorted.bam
The output:
#rname  startpos        endpos  numreads        covbases        coverage        meandepth      meanbaseq        meanmapq
KF848938.1      1       1665    256658  1665    100     22630.8 36.6    60

$ samtools coverage alignment_2_sorted.bam
The output:
#rname  startpos        endpos  numreads        covbases        coverage        meandepth      meanbaseq        meanmapq
KF848938.1      1       1665    233375  1665    100     20565.5 36.5    60

$ samtools coverage alignment_3_sorted.bam
The output:
#rname  startpos        endpos  numreads        covbases        coverage        meandepth      meanbaseq        meanmapq
KF848938.1      1       1665    250108  1665    100     22048.1 36.6    60

d) Creating mpileup
$ samtools mpileup -d 37000 -f reference.fasta alignment_1_sorted.bam > alignment_1_sorted.mpileup
$ samtools mpileup -d 37000 -f reference.fasta alignment_2_sorted.bam > alignment_2_sorted.mpileup
$ samtools mpileup -d 37000 -f reference.fasta alignment_3_sorted.bam > alignment_3_sorted.mpileup

6. Use VarScan to look for rare variants in the reference files

Running VarScan with a minimum variant frequency of 0.1% on each of the reference alignments:

$ java -jar /home/kate_the_snail/Загрузки/VarScan.v2.3.9.jar mpileup2snp alignment_1_sort.mpileup --min-var-freq 0.001 --variants --output-vcf 1 > VarScan_results_alignment_1.vcf
$ java -jar /home/kate_the_snail/Загрузки/VarScan.v2.3.9.jar mpileup2snp alignment_2_sort.mpileup --min-var-freq 0.001 --variants --output-vcf 1 > VarScan_results_alignment_2.vcf
$ java -jar /home/kate_the_snail/Загрузки/VarScan.v2.3.9.jar mpileup2snp alignment_3_sort.mpileup --min-var-freq 0.001 --variants --output-vcf 1 > VarScan_results_alignment_3.vcf

Writing to csv:

$ cat VarScan_results_alignment_1.vcf | awk 'FNR==1 {print "position,reference_base,alternative_base,frequency";next} NR>24 {gsub(",", ".", $10); split($10,a,":"); print $2, $4, $5, a[7]}' OFS=, > Lab\ notebooks/project2_flu_scripts/raw_data/VarScan_results_alignment_1.csv

$ cat VarScan_results_alignment_2.vcf | awk 'FNR==1 {print "position,reference_base,alternative_base,frequency";next} NR>24 {gsub(",", ".", $10); split($10,a,":"); print $2, $4, $5, a[7]}' OFS=, > Lab\ notebooks/project2_flu_scripts/raw_data/VarScan_results_alignment_2.csv

$ cat VarScan_results_alignment_3.vcf | awk 'FNR==1 {print "position,reference_base,alternative_base,frequency";next} NR>24 {gsub(",", ".", $10); split($10,a,":"); print $2, $4, $5, a[7]}' OFS=, > Lab\ notebooks/project2_flu_scripts/raw_data/VarScan_results_alignment_3.csv

The same for roommate's data:
$ cat VarScan_results_rare.vcf | awk 'FNR==1 {print "position,reference_base,alternative_base,frequency";next} NR>24 {gsub(",", ".", $10); split($10,a,":"); print $2, $4, $5, a[7]}' OFS=, > Lab\ notebooks/project2_flu_scripts/raw_data/VarScan_results_roommate.csv

The csv files can be found here https://github.com/Kravchuk-Ekaterina/influenza-variants/tree/main/VarScan_results

7. Compare the control results to your roommate’s results

Created comparing.ipynb to compare them. The results are in significant_mutations.csv

8. Epitope mapping

Created epitope_mapping.ipynb to map epitopes. The results are in epitope_significant_mutations.csv

Scripts from 7 and 8 are here https://github.com/Kravchuk-Ekaterina/influenza-variants/tree/main/scripts
Their outputs are here https://github.com/Kravchuk-Ekaterina/influenza-variants/tree/main/results
